paths:
  /api/products/:
    post:
      tags:
        - Products
      summary: Creates a product
      description: This will store the product's information into the database
      operationId: createProduct
      requestBody:
        $ref: "#/components/requestBodies/NewProduct"
      responses:
        "201":
          description: Created message and payload with the most important product's information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Product successfully created
                  payload:
                    type: object
                    $ref: "#/components/schemas/ProductServerResponse"
        "400":
          description: Bad request error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: INVALID_TYPES | PRODUCT_ALREADY_EXISTS
                  causes:
                    type: object
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
    get:
      tags:
        - Products
      summary: Gets a list of products
      description: This will retrive a list of products stored in the database
      operationId: getProducts
      responses:
        "200":
          description: Success message, payload with the most important product's information and some other information for pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Products found
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductServerResponse"
                  currentPage:
                    type: number
                    example: 1
                  totalPages:
                    type: number
                    example: 1
                  prevPage:
                    type: number
                    example: null
                  nextPage:
                    type: number
                    example: null
                  hasPrevPage:
                    type: boolean
                    example: false
                  hasNextPage:
                    type: boolean
                    example: false
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: PRODUCTS_NOT_FOUND
  /api/products/{pid}:
    get:
      tags:
        - Products
      summary: Gets a product
      description: This will find a product based on its ID and retreive it if found
      operationId: getProduct
      parameters:
        - name: pid
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success message and payload with the most important product's information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Product found
                  payload:
                    type: object
                    $ref: "#/components/schemas/ProductServerResponse"
                  isOwner:
                    type: boolean
                    example: false
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: PRODUCT_NOT_FOUND
    put:
      tags:
        - Products
      summary: Updates a product
      description: This will find a products based on its ID and update it if found
      operationId: updateProduct
      parameters:
        - name: pid
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ProductToUpdate"
      responses:
        "200":
          description: Success message and payload with the most important product's information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Product was successfully updated
                  payload:
                    type: object
                    $ref: "#/components/schemas/ProductServerResponse"
        "400":
          description: Bad request error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: INVALID_TYPES
                  causes:
                    type: object
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: PRODUCT_NOT_FOUND
    delete:
      tags:
        - Products
      summary: Deletes a product
      description: This will find a product based on its ID and delete it if found
      operationId: deleteProduct
      parameters:
        - name: pid
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Product was successfully removed
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: PRODUCT_NOT_FOUND
components:
  schemas:
    NewProduct:
      type: object
      properties:
        title:
          type: string
          example: Samsung A71
        description:
          type: string
          example: Telefono de gama media
        code:
          type: string
          example: s4d5w789qrhj
        price:
          type: integer
          example: 600
        stock:
          type: integer
          example: 150
        category:
          type: string
          example: Telefono de gama media
        thumbnails:
          type: string
          format: binary
    ProductServerResponse:
      type: object
      properties:
        id:
          type: string
          example: 658bfc901ea7b5fd79a9c0c4
        title:
          type: string
          example: Samsung A71
        description:
          type: string
          example: Telefono de gama media
        code:
          type: string
          example: s4d5w789qrhj
        price:
          type: number
          example: 600
        status:
          type: boolean
        stock:
          type: number
          example: 150
        category:
          type: string
          example: Telefono de gama media
        thumbnails:
          type: array
        owner:
          type: string
          example: 658cb6f2f223f47d581332d5
  requestBodies:
    NewProduct:
      description: Information required to create a new product into the database
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/NewProduct"
      required: true
    ProductToUpdate:
      description: Relevant information to be updated in the product
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              title:
                type: string
                example: Samsung A71
              description:
                type: string
                example: Telefono de gama media
              code:
                type: string
                example: s4d5w789qrhj
              price:
                type: integer
                example: 600
              stock:
                type: integer
                example: 150
              category:
                type: string
                example: Telefono de gama media
              thumbnails:
                type: string
                format: binary
