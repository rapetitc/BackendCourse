paths:
  /api/users:
    post:
      tags:
        - Users
      summary: Creates an user
      description: Creates an user account based on the information required, follow the << NewUser Schema >>
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/NewUser"
      responses:
        "201":
          description: Created message and payload with the most important user's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User successfully created
                  payload:
                    $ref: "#/components/schemas/UserServerResponse"
        "400":
          description: Bad request error message with the type and causes (this last is only valid for "INVALID_TYPES" case)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: INVALID_TYPES | USER_ALREADY_EXISTS
                  causes:
                    type: array
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
  /api/users/{uid}:
    get:
      tags:
        - Users
      summary: Gets an user
      description: Gets the most important information of an user, firstly this should be found by its ID
      operationId: getUserByID
      parameters:
        - name: uid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Succes message and payload with the most important user's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User found
                  payload:
                    $ref: "#/components/schemas/UserServerResponse"
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: USER_NOT_FOUND
    put:
      tags:
        - Users
      summary: Updates an user
      description: Updates the most important information of an user, firstly this should be found by its ID
      operationId: updateUser
      requestBody:
        $ref: "#/components/requestBodies/UserToUpdate"
      parameters:
        - name: uid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success message and payload with the most important user's information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User successfully updated
                  payload:
                    $ref: "#/components/schemas/UserServerResponse"
        "400":
          description: Bad request error message with the type and causes
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: INVALID_TYPES
                  causes:
                    type: array
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: USER_NOT_FOUND
    delete:
      tags:
        - Users
      summary: Deletes an user
      description: Deletes an user, firstly this should be found by its ID
      parameters:
        - name: uid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User successfully removed
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: USER_NOT_FOUND
  /api/users/premium/{uid}:
    put:
      tags:
        - Users
      summary: Updates user's role
      description: It can update the user's role from USER to PREMIUM (if verified) and viceversa (no required to be verified)
      parameters:
        - name: uid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User's role successfully updated
        "400":
          description: Bad request error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: USER_NOT_VERIFIED
                  cause:
                    type: string
                    example: {}
        "401":
          description: Unauthorized error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: UNAUTHORIZED
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: USER_NOT_FOUND
  /api/users/recovery-password/:
    post:
      tags:
        - Users
      summary: Request to recovery user's account access
      description: A request that help users to recovery the access of the account by confirming their identity and sending an email to continue
      requestBody:
        description: User's email that will be requesting the password reset
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@user.com
        required: true
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Recovery request successfully initiated
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: USER_NOT_FOUND
  /api/users/recovery-password/{token}:
    get:
      tags:
        - Users
      summary: Confirm user's request by token
      description: A callback url that confirms user's request by token and page redirect user to recreate new password o reinitiate the recovery process based on the confirmation
      parameters:
        - name: token
          in: path
          description: Token of the request
          required: true
          schema:
            type: string
      responses:
        "308":
          description: If confirmed a new token will be created to identify the process and user would be redirected to recreate a password, otherwise, user will be redirected to reinitiate the recovery password process once again
    put:
      tags:
        - Users
      summary: Concrete user's recovery password request
      description: Finally, once confirmed the previous the 2nd step, user would be sent a new regenerated token to identify this last step and from the UI Client user should be able to update the password
      parameters:
        - name: token
          in: path
          description: Token of the request
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User's password successfully updated
        "400":
          description: Bad request error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: SAME_CURRENT_PASSWORD
  /api/users/{uid}/documents:
    put:
      tags:
        - Users
      summary: Upload and update user's documents to apply for verification
      description: This will help customer to update their documents and qualify to be verified
      parameters:
        - name: uid
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/UserDocsUpdate"
      responses:
        "200":
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Document successfully uploaded
        "400":
          description: Bad request error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: NO_FILES_TO_UPLOAD
        "404":
          description: Not found error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  error:
                    type: string
                    example: USER_NOT_FOUND
components:
  schemas:
    NewUser:
      type: object
      properties:
        first_name:
          type: string
          example: Frank
        last_name:
          type: string
          example: Smith
        age:
          type: integer
          example: 32
        email:
          type: string
          example: user@user.com
        password:
          type: string
          example: user@user.com
    UserToUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        age:
          type: string
        email:
          type: string
        cart:
          type: string
        status:
          type: string
        profile_picture:
          type: string
          format: binary
    UserServerResponse:
      type: object
      properties:
        first_name:
          type: string
          example: Frank
        last_name:
          type: string
          example: Smith
        age:
          type: integer
          example: 32
        email:
          type: string
          example: user@user.com
        role:
          type: string
          example: USER
        cart:
          type: string
          example: 9w87r93748937re8e99r87143
        verified:
          type: string
          example: false
        profile_picture:
          type: string
          example: http://localhost:8080/storage/s7w8r93748937re8e99r8714s/profile_picture.jpg
        last_connection:
          type: string
          example: 2023-12-22T04:02:26.627Z
    UserDocsUpdate:
      type: object
      properties:
        identification:
          type: string
          format: binary
        address_certificate:
          type: string
          format: binary
        bank_account_certificate:
          type: string
          format: binary
  requestBodies:
    NewUser:
      description: Information that will be used to create a new user account
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NewUser"
      required: true
    UserToUpdate:
      description: Information to be updated in an user account
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/UserToUpdate"
      required: true
    UserDocsUpdate:
      description: Information to required to be verified
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/UserDocsUpdate"
      required: true
